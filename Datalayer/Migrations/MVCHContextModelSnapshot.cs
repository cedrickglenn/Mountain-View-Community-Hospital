// <auto-generated />
using System;
using Datalayer.EFClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Datalayer.Migrations
{
    [DbContext(typeof(MVCHContext))]
    partial class MVCHContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.Diagnosis", b =>
                {
                    b.Property<string>("DiagnosisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicianId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.EmployeeSpecialty", b =>
                {
                    b.Property<string>("EmployeeSpecialtyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAcquired")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecialtyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeSpecialtyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("EmployeeSpecialty");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.FacilityPhysician", b =>
                {
                    b.Property<string>("FacilityPhysicianId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacilityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicianId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FacilityPhysicianId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("FacilityPhysician");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicianId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PatientOrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.OrderService", b =>
                {
                    b.Property<string>("OrderServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderServiceId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderService");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.PhysicianSpecialty", b =>
                {
                    b.Property<string>("PhysicianSpecialtyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAcquired")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhysicianId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhysicianSpecialtyId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("PhysicianSpecialty");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.Treatment", b =>
                {
                    b.Property<string>("TreatmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicianId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProcedureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TreatmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Treatment");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.UnitEmployee", b =>
                {
                    b.Property<string>("UnitEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkUnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UnitEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkUnitId");

                    b.ToTable("UnitEmployee");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.VendorSupply", b =>
                {
                    b.Property<string>("VendorSupplyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VendorSupplyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorSupply");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.VitalRecord", b =>
                {
                    b.Property<string>("VitalRecordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NurseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VitalRecordId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.HasIndex("VitalId");

                    b.ToTable("VitalRecord");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.VolunteerSpecialty", b =>
                {
                    b.Property<string>("VolunteerSpecialtyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateAcquired")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialtyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VolunteerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VolunteerSpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("VolunteerSpecialty");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.WardEmployee", b =>
                {
                    b.Property<string>("WardEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WardEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WardId");

                    b.ToTable("WardEmployee");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Bed", b =>
                {
                    b.Property<string>("BedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkUnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BedId");

                    b.HasIndex("WorkUnitId");

                    b.ToTable("Bed");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Condition", b =>
                {
                    b.Property<string>("ConditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionId");

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Facility", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacilityId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Item", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.JobClass", b =>
                {
                    b.Property<string>("JobClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobClassId");

                    b.ToTable("JobClass");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PatientOrder", b =>
                {
                    b.Property<string>("PatientOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PatientOrderId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientOrder");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Person", b =>
                {
                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleInitial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Procedure", b =>
                {
                    b.Property<string>("ProcedureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcedureId");

                    b.ToTable("Procedure");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Specialty", b =>
                {
                    b.Property<string>("SpecialtyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialtyId");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Vendor", b =>
                {
                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Visit", b =>
                {
                    b.Property<string>("VisitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutpatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VisitId");

                    b.HasIndex("OutpatientId");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Vital", b =>
                {
                    b.Property<string>("VitalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalId");

                    b.ToTable("Vital");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Ward", b =>
                {
                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FacilityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardId");

                    b.HasIndex("FacilityId");

                    b.ToTable("Ward");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.WorkUnit", b =>
                {
                    b.Property<string>("WorkUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FacilityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkUnitId");

                    b.HasIndex("FacilityId");

                    b.ToTable("WorkUnit");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Employee", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Person");

                    b.Property<DateTime>("DateHired")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Person");

                    b.Property<string>("ContactPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfContact")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsurancePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriberPersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubscriberRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("SubscriberPersonId");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Physician", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Person");

                    b.Property<string>("DEANumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PagerNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Physician");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Volunteer", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Person");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HoursWorked")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("WorkUnitId");

                    b.HasDiscriminator().HasValue("Volunteer");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Nurse", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Employee");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Staff", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Employee");

                    b.Property<string>("JobClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("JobClassId");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Technician", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Employee");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnName("Technician_License")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Technician");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Inpatient", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient");

                    b.Property<string>("BedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAdmitted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("BedId");

                    b.HasIndex("WardId");

                    b.HasDiscriminator().HasValue("Inpatient");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Outpatient", b =>
                {
                    b.HasBaseType("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Outpatient");
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.Diagnosis", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.Condition", "ConditionLink")
                        .WithMany("Diagnoses")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient", "PatientLink")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Physician", "PhysicianLink")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.EmployeeSpecialty", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Employee", "EmployeeLink")
                        .WithMany("EmployeeSpecialties")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.Specialty", "SpecialtyLink")
                        .WithMany("EmployeeSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.FacilityPhysician", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.Facility", "FacilityLink")
                        .WithMany("FacilityPhysicians")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Physician", "PhysicianLink")
                        .WithMany("FacilityPhysicians")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.Order", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient", "PatientLink")
                        .WithMany("Orders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Physician", "PhysicianLink")
                        .WithMany("Orders")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.OrderItem", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.Item", "ItemLink")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PatientOrder", "PatientOrderLink")
                        .WithMany("OrderItems")
                        .HasForeignKey("PatientOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.OrderService", b =>
                {
                    b.HasOne("Datalayer.EFClasses.AssociativeClasses.Order", "OrderLink")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.Service", "ServiceLink")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.PhysicianSpecialty", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Physician", "PhysicianLink")
                        .WithMany("PhysicianSpecialties")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.Specialty", "SpecialtyLink")
                        .WithMany("PhysicianSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.Treatment", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient", "PatientLink")
                        .WithMany("Treatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Physician", "PhysicianLink")
                        .WithMany("Treatments")
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.Procedure", "ProcedureLink")
                        .WithMany("Treatments")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.UnitEmployee", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Employee", "EmployeeLink")
                        .WithMany("UnitEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.WorkUnit", "WorkUnitLink")
                        .WithMany("UnitEmployees")
                        .HasForeignKey("WorkUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.VendorSupply", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.Item", "ItemLink")
                        .WithMany("VendorSupplies")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.Vendor", "VendorLink")
                        .WithMany("VendorSupplies")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.VitalRecord", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Nurse", "NurseLink")
                        .WithMany("VitalRecords")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient", "PatientLink")
                        .WithMany("VitalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.Vital", "VitalLink")
                        .WithMany("VitalRecords")
                        .HasForeignKey("VitalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.VolunteerSpecialty", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.Specialty", "SpecialtyLink")
                        .WithMany("VolunteerSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Volunteer", "VolunteerLink")
                        .WithMany("VolunteerSpecialties")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.AssociativeClasses.WardEmployee", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Employee", "EmployeeLink")
                        .WithMany("WardEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.Ward", "WardLink")
                        .WithMany("WardEmployees")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Bed", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.WorkUnit", "WorkUnitLink")
                        .WithMany("Beds")
                        .HasForeignKey("WorkUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PatientOrder", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient", "PatientLink")
                        .WithMany("PatientOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Visit", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Outpatient", "OutpatientLink")
                        .WithMany("Visits")
                        .HasForeignKey("OutpatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.Ward", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.Facility", "FacilityLink")
                        .WithMany("Wards")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.WorkUnit", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.Facility", "FacilityLink")
                        .WithMany("WorkUnits")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Patient", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Person", "ContactPersonLink")
                        .WithMany("PatientContacts")
                        .HasForeignKey("ContactPersonId");

                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Person", "SubscriberPersonLink")
                        .WithMany("Dependents")
                        .HasForeignKey("SubscriberPersonId");
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Volunteer", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.PersonClasses.Person", "SupervisorLink")
                        .WithMany("Volunteers")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datalayer.EFClasses.BaseClasses.WorkUnit", "WorkUnitLink")
                        .WithMany("Volunteers")
                        .HasForeignKey("WorkUnitId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Staff", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.JobClass", "JobClassLink")
                        .WithMany("Staff")
                        .HasForeignKey("JobClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Datalayer.EFClasses.BaseClasses.PersonClasses.Inpatient", b =>
                {
                    b.HasOne("Datalayer.EFClasses.BaseClasses.Bed", "BedLink")
                        .WithMany("Inpatients")
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Datalayer.EFClasses.BaseClasses.Ward", "WardLink")
                        .WithMany("Inpatients")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
